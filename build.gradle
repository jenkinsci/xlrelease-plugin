/**
 * Copyright (c) 2013, XebiaLabs B.V., All rights reserved.
 *
 *
 * The XL Release plugin for Jenkins is licensed under the terms of the GPLv2
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most XebiaLabs Libraries.
 * There are special exceptions to the terms and conditions of the GPLv2 as it is applied to
 * this software, see the FLOSS License Exception
 * <https://github.com/jenkinsci/xlrelease-plugin/blob/master/LICENSE>.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth
 * Floor, Boston, MA 02110-1301  USA
 */

group = "com.xebialabs.ci"
version = "7.5.3-SNAPSHOT"
description = "Package and deploy your applications from Jenkins with &lt;a href='http://www.xebialabs.com'&gt;XebiaLabs XL Release&lt;/a&gt;."

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jpi'
apply plugin: 'net.researchgate.release'

build.dependsOn jpi

task deleteGeneratedSrcLocalizer(type:Delete) {
    delete "build/generated-src/localizer"
}

localizer.dependsOn deleteGeneratedSrcLocalizer

repositories {
    mavenCentral()
    maven {
        url "${projectDir}/repo"
    }
    maven {
        name "netbeans"
        delegate.url("http://bits.netbeans.org/maven2")
    }
    maven {
        name "jenkins"
        delegate.url("http://repo.jenkins-ci.org/releases")
    }
}

buildscript {
    repositories {
        maven {
            name "jenkins"
            delegate.url("http://repo.jenkins-ci.org/releases")
        }
        // The plugin is currently only available via the Jenkins
        // Maven repository, but has dependencies in Maven Central.
        mavenCentral()

    }
    dependencies {
        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.18.0'
        classpath 'net.researchgate:gradle-release:2.3.4'
    }
}


jenkinsPlugin {
    coreVersion = '1.642.3' // we need to support LTS versions
    displayName = "XebiaLabs XL Release Plugin"
    url = 'https://wiki.jenkins-ci.org/display/JENKINS/XL+Release+Plugin'
    gitHubUrl = 'https://github.com/jenkinsci/XL+Release-plugin'


    developers {
        developer {
            id 'XebiaLabsCI'
            name 'XebiaLabs'
            email 'xl-developers (at) xebialabs (dot) com'
        }
    }
}

configurations {
    compile.transitive = true

    all*.exclude group: 'com.thoughtworks.xstream', module: "xstream"
    // this artifact lives in a netbeans repository which behaves flaky
    // it's not used so exclude it.
    testCompile.exclude group: 'org.netbeans.modules', module: "org-netbeans-insane"

    additionalLibs
}

jpi.doFirst {
  classpath = classpath + project.configurations.additionalLibs
}

def truezipVersion = "7.1.4" // this is the latest version not to bork on a Java6 Jenkins master/slave-setup
// (Later versions reference NIO.2, resulting in a NoClassDefFoundError on java.nio.file.Path)

configurations.all {
    resolutionStrategy {
        force "de.schlichtherle.truezip:truezip-driver-file:$truezipVersion"
        force "de.schlichtherle.truezip:truezip-driver-zip:$truezipVersion"
        force "de.schlichtherle.truezip:truezip-file:$truezipVersion"
        force "de.schlichtherle.truezip:truezip-kernel:$truezipVersion"
        force "de.schlichtherle.truezip:truezip-swing:$truezipVersion"
    }
}

dependencies {
    compile "com.sun.jersey:jersey-client:1.18"
    compile "com.sun.jersey:jersey-core:1.18"
    compile "com.sun.jersey:jersey-json:1.18"
    compile "org.jdom:jdom2:2.0.5"
    compile "org.slf4j:slf4j-api:1.7.5"
    compile "javax.ws.rs:jsr311-api:1.1.1"
    compile "javax.xml.bind:jaxb-api:2.2.2"

    compile 'com.google.code.findbugs:jsr305:2.0.2'
    compile 'findbugs:annotations:1.0.0'

    additionalLibs "findbugs:annotations:1.0.0"

    jenkinsPlugins "org.jenkins-ci.plugins:credentials:1.16.1@jar"
    jenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:1.10@jar'

    testCompile "junit:junit:4.11"
    testCompile "org.powermock:powermock-module-junit4:1.5.3"
    testCompile "org.powermock:powermock-api-mockito:1.5.3"
    testCompile "org.mockito:mockito-all:1.9.5"

    testCompile "org.jenkins-ci.modules:instance-identity:1.3@jm"
    testCompile "org.jenkins-ci.modules:slave-installer:1.2@jm"
    testCompile "org.jenkins-ci.modules:windows-slave-installer:1.2@jm"
    testCompile "org.jenkins-ci.modules:launchd-slave-installer:1.2@jm"
    testCompile "org.jenkins-ci.modules:systemd-slave-installer:1.1@jm"
    testCompile "org.jenkins-ci.modules:upstart-slave-installer:1.1@jm"

    jenkinsTest 'org.jenkins-ci.main:maven-plugin:1.480@jar'
    jenkinsTest "org.jenkins-ci.plugins:credentials:1.16.1@jar"

    jenkinsTest ("org.jenkins-ci.plugins.workflow:workflow-step-api:1.10@jar")  { transitive = true }
    jenkinsTest ("org.jenkins-ci.plugins.workflow:workflow-support:1.10@jar") { transitive = true }
    jenkinsTest ("org.jenkins-ci.plugins.workflow:workflow-cps:1.10@jar") { transitive = true }

}
configurations {
    all*.exclude group: 'org.jenkins-ci.modules', module: 'launchd-slave-installer'
    all*.exclude group: 'org.jenkins-ci.modules', module: 'instance-identity'
    all*.exclude group: 'org.jenkins-ci.modules', module: 'slave-installer'
    all*.exclude group: 'org.jenkins-ci.modules', module: 'windows-slave-installer'
    all*.exclude group: 'org.jenkins-ci.modules', module: 'launchd-slave-installer'
    all*.exclude group: 'org.jenkins-ci.modules', module: 'systemd-slave-installer'
    all*.exclude group: 'org.jenkins-ci.modules', module: 'upstart-slave-installer'
}

// Integration test configuration which runs using a real XL Release server
sourceSets {
    itest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources.srcDir file('src/itest/resources')
    }
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

// Below dependencies should have been inherited from testRuntime
dependencies {
    itestCompile "org.jenkins-ci.plugins:ant:1.1@jar"
    itestCompile "org.jenkins-ci.plugins:subversion:1.26@jar"
    itestCompile "org.jenkins-ci.plugins:mailer:1.4@jar"
    itestCompile "org.jenkins-ci.main:maven-plugin:1.509.1@jar"
    itestCompile "org.jenkins-ci.plugins:javadoc:1.0@jar"

    itestCompile "org.jenkins-ci.plugins.workflow:workflow-job:1.10@jar"
    itestCompile "org.jenkins-ci.plugins.workflow:workflow-cps:1.10@jar"
    itestCompile "org.jenkins-ci.plugins.workflow:workflow-api:1.10@jar"
}

task itest(type: Test) {
    description = "Run integration tests"
    testClassesDir = project.sourceSets.itest.output.classesDir
    classpath = project.sourceSets.itest.runtimeClasspath
}

itest.dependsOn test

if (project.hasProperty('xlReleaseIntegration.host')) {
    def host = project.property('xlReleaseIntegration.host')
    def username = project.property('xlReleaseIntegration.username')
    def password = project.property('xlReleaseIntegration.password')
    itest.systemProperties([
        "xlReleaseIntegration.host" : "$host",
        "xlReleaseIntegration.username" : "$username",
        "xlReleaseIntegration.password" : "$password"
    ])
}

import org.apache.tools.ant.filters.ReplaceTokens

processItestResources {
    filesMatching('**/com.xebialabs.xlrelease.ci.XLReleaseNotifier.xml') {
        filter ReplaceTokens, tokens: [
            'xlReleaseServerUrl': project.property('xlReleaseIntegration.host')
        ]
    }
}

release {
    buildTasks = ['publish']
    tagTemplate = 'xlrelease-plugin-$version'
    preTagCommitMessage = 'Released Jenkins XL Release plugin '
    tagCommitMessage = 'Tag for xlrelease-plugin-$version'
    newVersionCommitMessage = 'Set development version to '
}

task checkJavaVersion << {
    if(JavaVersion.current() < JavaVersion.VERSION_1_7) {
        throw new GradleException("This build must be run with at least java ${JavaVersion.VERSION_1_7}")
    }
}

tasks.checkJavaVersion.execute()
